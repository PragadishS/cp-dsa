1D - LINKED LIST 






#include<bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp> 
#include <ext/pb_ds/assoc_container.hpp>
#define int long long
#define MOD 1000000007

using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

struct Node{
   public:
   int data;
   Node* next;

   Node(int data1, Node* next1){
      data=data1;
      next=next1;
   }
   Node(int data1){
       data=data1;
       next=nullptr;
   }
};

Node* convert(vector<int>&arr){
   Node* head = new Node(arr[0]);
   Node* mover = head;
   for(int i=1;i<arr.size();i++){
      Node* temp = new Node(arr[i]);
      mover->next = temp;
      mover= temp;
   }
   return head;
}

vector<int>print(Node* head){
   vector<int>red;
    Node* temp = head;

     while(temp!=nullptr){
      int ui;
      ui=temp->data;
      red.push_back(ui);
      temp=temp->next;
    }

    return red;

}

int length(Node* head){
   int cou=0;

   Node* temp = head;

   while(temp!=nullptr){
      int ui;
      ui=temp->data;
      temp=temp->next;
      cou++;
    }

    return cou;

}

bool verify(Node* head , int num){
   int found=0;

   Node* temp = head;

   while(temp!=nullptr){
      int ui;
      ui=temp->data;
      if(ui==num){
         found++;
      }
      temp=temp->next;
    }

    if(found==0){
      return false;
    }else{
      return true;
    }

}

Node* removehead(Node* head){
   if(head==NULL){
      return head;
   }
   Node* temp = head;
   head = head->next;
   free(temp);
   return head;
}

Node* removetail(Node* head){
   if(head==NULL || head->next==NULL){
      return NULL;
   }
   Node* temp = head;
   while(temp->next->next!=NULL){
      temp=temp->next;
   }

   free(temp->next);
   temp->next=nullptr;

   return head;
}

Node* removeAtPos(Node* head , int ind){
   if(head==NULL){
      return head;
   }
   // the given index is in 1 based indexing 
   int cou=0;
   Node* temp = head;
   if(head->next==NULL){
      return NULL;
   }

   while(true){
      cou++;
      if(cou==ind-1){
         Node* jump;
         jump=temp->next->next;
         Node* gone = temp->next;
         free(gone);
         temp->next = jump;
         break;
      }
      temp=temp->next;
   }

   return head;

}


Node* removeVal(Node* head, int val){
   if(head==NULL){
      return head;
   }
   if(head->data==val){
      Node* good = head;
      head=head->next;
      free(good);
      return head;
   }
   Node* temp = head;
   Node* prev = NULL;
   while(temp){
      if(temp->data==val){
         prev->next = prev->next->next;
         free(temp);
         break;
      }
      prev=temp;
      temp=temp->next;
   }
   return head;
}

Node* inserthead(Node* head , int val){
   Node* temp = new Node(val,head);
   return temp;
}  

Node* insertend(Node* head , int val){
   Node* add = new Node(val , NULL);
   Node* temp = head;
   while(true){
      if(temp->next==NULL){
         temp->next=add;
         break;
      }
      temp=temp->next;
   }
   return head;
}

Node* insertpos(Node* head , int val , int pos){
   Node* temp = head;
   int start=1;// 1 based indexing 
   while(true){
      if(start==pos-1){
         Node* one = temp;
         Node* two = temp->next;
         Node* add = new Node(val,two);
         one->next = add;
         break;
      }
      start++;
      temp = temp->next;
   }
   return head;
}

Node* insertBeforeVal(Node* head , int val , int num){
   // do like kinda same thing
}

Node* insertAfterVal(Node* head , int val , int num){
   // do like kinda same thing
   
}

signed main(){
    vector<int>arr = {2,5,8,7};

    Node* y = new Node(arr[0],nullptr);

    cout<<y<<endl; // this print the address of the first index

    cout<<y->data<<endl;// this print the value of the first index

    Node* head = convert(arr);// this is a must as this creates a link with every node that is it creates the linked list 

    cout<<head->data<<endl;//this also prints the value in the 0th index

    // print the whole linked list
    vector<int>printy = print(head);
    for(int i=0;i<printy.size();i++){
      cout<<printy[i]<<" ";
    }
    cout<<endl;

   // to find the length of the linked list
    int siz=length(head);
    cout<<siz<<endl;

   //to check if certain number is there in the linked list or not 
    bool check = verify(head ,5);
    if(check==false){
      cout<<"NOT FOUND"<<endl;
    }else{
      cout<<"FOUND"<<endl;
    }

   //remove the first node in the linked list 
   head = removehead(head);
    // printing it after the change 
    vector<int>updat = print(head);
    for(int i=0;i<updat.size();i++){
      cout<<updat[i]<<" ";
    }
    cout<<endl;

   //remove the last node in the linked list 
   head = removetail(head);
   //printing it after the change 
    vector<int>lope = print(head);
    for(int i=0;i<lope.size();i++){
      cout<<lope[i]<<" ";
    }
    cout<<endl;

   //to delete a node in specific postion
   //also check whether the given position is there or not
   // if the position is first or last , then dont use this to delete , use the above declared function
   head = removeAtPos(head , 4);
   //printing it after the change 
   vector<int>dime = print(head);
    for(int i=0;i<dime.size();i++){
      cout<<dime[i]<<" ";
    }
    cout<<endl;

   //to delete a node with specific value
    head = removeVal(head, 100);
   //printing it after the change 
    vector<int>fine = print(head);
    for(int i=0;i<fine.size();i++){
      cout<<fine[i]<<" ";
    }
    cout<<endl;

   //inserting a node at the first 
    head = inserthead(head,21);
    // now printing the updated one 
    vector<int>wine = print(head);
    for(int i=0;i<wine.size();i++){
      cout<<wine[i]<<" ";
    }
    cout<<endl;
   
   ///inserting a node at the end
    head = insertend(head,35);
   // now printing the updated one 
    vector<int>lut = print(head);
    for(int i=0;i<lut.size();i++){
      cout<<lut[i]<<" ";
    }
    cout<<endl;
   
   // inserting a node in a specific position
    head = insertpos(head, 35 , 2); // one based indexing
   // now printing the updated one 
   vector<int>ui = print(head);
   for(int i=0;i<ui.size();i++){
      cout<<ui[i]<<" ";
   }
   cout<<endl;








    
    






    return 0;
}
