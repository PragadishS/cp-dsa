TO CHECK WHETHER THERE IS A CYCLE IN DIRECTED GRAPH

// g++-13 r1.cpp -ld_classic
#include<bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp> 
#include <ext/pb_ds/assoc_container.hpp>
#define int long long
#define MOD 1000000007
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
//           float/variable  greater / less_equal or greater_equal - multiset
// pbds functions - *A.find_by_order(0) = indexing 0th index
// pbds functions - A.order_of_key(6) = no. of elements smaller than 6

vector<int>adj[100005];
map<int,int>vis;
int cycle=0;

void dfs(int x) { 
        vis[x] = -1; 

        for (int num : adj[x]) {
            if (vis[num] == -1) { 
                cycle++;
                return;
            }
            if (vis[num] == 0) { 
                dfs(num);
                if (cycle != 0) return; 
            }
           
        }
        vis[x] = 1;                                                 
    }

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin>>n;
    int e;
    cin>>e;
    while(e--){
	cin>>e1>>e2;
      int e1,e2;
      adj[e1].push_back(e2);
    }

    for(int i=0;i<n;i++){
      if(vis[i]==0){
         dfs(i);
         if(cycle!=0){
            break;
         }
      }
    }

    if(cycle==0){
      cout<<"cycle is not there"<<endl;
    }else{
      cout<<"cycle is there"<<endl;
    }
    return 0;
}
