TOPO SORT USING BFS OR KAHNS ALGO 


// g++-13 r1.cpp -ld_classic
#include<bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp> 
#include <ext/pb_ds/assoc_container.hpp>
#define int long long
#define MOD 1000000007
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
//           float/variable  greater / less_equal or greater_equal - multiset
// pbds functions - *A.find_by_order(0) = indexing 0th index
// pbds functions - A.order_of_key(6) = no. of elements smaller than 6

vector<int>adj[100005];
map<int,int>vis;
vector<int>v;
map<int,int>incom;

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
      int si;
      cin>>si;
      for(int j=0;j<si;j++){
         int e1;
         cin>>e1;
         adj[i].push_back(e1);
         incom[e1]++;
      }
    }

    queue<int>q;
    vector<int>v;
    for(int i=0;i<n;i++){
      if(incom[i]==0){
         q.push(i);
      }
    }
    while(!q.empty()){
      int fir;
      fir=q.front();
      q.pop();
      v.push_back(fir);
      if(adj[fir].size()!=0){
         for(int i=0;i<adj[fir].size();i++){
            int num;
            num=adj[fir][i];
            incom[num]--;
            if(incom[num]==0){
               q.push(num);
            }
         }
      }
    }

    for(int i=0;i<v.size();i++){
      cout<<v[i]<<" ";
    }
    cout<<endl;

   
    return 0;
}
