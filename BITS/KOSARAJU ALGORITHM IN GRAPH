KOSARAJU ALGORITHM IN GRAPH 

TO FIND THE NUMBER OF STRONGLY CONNECTED COMPONENTS AND ALSO PRINT THE COMPONENTS AS WELL



TIME COMPLEXITY = O(3(V+E))




#include<bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp> 
#include <ext/pb_ds/assoc_container.hpp>
#define int long long
#define MOD 1000000007
using namespace std;

vector<int>vis(200005,0);
vector<int>adj[200005];
stack<int>st;
vector<int>RevAdj[200005];
vector<int>done(200005,0);

vector<vector<int>>praga;// all the scc nodes
vector<int>temp;

void dfs(int x){
   vis[x]=1;

   for(int i=0;i<adj[x].size();i++){
      int too;
      too=adj[x][i];
      if(vis[too]==0){
         dfs(too);
      }
   }


   st.push(x);

}

void bfs(int x){
   done[x]=1;
   temp.push_back(x);
   for(int i=0;i<RevAdj[x].size();i++){
      int too;
      too=RevAdj[x][i];
      if(done[too]==0){
         bfs(too);
      }
   }
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int n;
    cin>>n;
    int e;
    cin>>e;
    for(int i=0;i<e;i++){
      int e1,e2;
      cin>>e1>>e2;
      adj[e1].push_back(e2);
      RevAdj[e2].push_back(e1);
    }

    for(int i=0;i<n;i++){
      if(vis[i]==0){
         dfs(i);
      }
    }
   
   int scc=0;
    while(!st.empty()){
      int node = st.top();
      st.pop();
      if(done[node]==0){
         scc++;
         temp.clear();
         bfs(node);
         praga.push_back(temp);
      }
    }

    cout<<"count "<<scc<<endl;

    for(int i=0;i<praga.size();i++){
      int siz;
      siz=praga[i].size();
      for(int j=0;j<siz;j++){
         cout<<praga[i][j]<<" ";
      }
      cout<<endl;
    }

    return 0;
}
