BELLMAN FORD ALGO 

IT IS A ALGO WHERE WE TRY TO FIND THE SHORTEST DISTANCE FROM THE SOURCE TO EVERY OTHER NODE .

BUT THIS IS SAME AS DIJKSTRAâ€™S ALGO , NO THE CATCH IS HERE WE CAN HAVE NEGATIVE WEIGHTS AS WELL 
THATS HOW BELLMAN IS DIFFERENT FROM DIJKSTRA




// GOD SPEED 
// Author : il-pragadish-aak

// g++-13 r1.cpp -ld_classic
#include<bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp> 
#include <ext/pb_ds/assoc_container.hpp>
#define int long long
#define MOD 1000000007
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
//           float/variable  greater / less_equal or greater_equal - multiset
// pbds functions - *A.find_by_order(0) = indexing 0th index
// pbds functions - A.order_of_key(6) = no. of elements smaller than 6
signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int v;
    cin>>v;
    int e;
    cin>>e;
    //map<int,vector<pair<int,int>>>adj;
    vector<pair<int,pair<int,int>>>edges;
    for(int i=0;i<e;i++){
      int e1,e2,wt;
      cin>>e1>>e2>>wt;
      //adj[e1].push_back({e2,wt});
      edges.push_back({e1,{e2,wt}});
    }

    // do relaxtion for v-1 times 
   int src;
   cin>>src;
   vector<int>dis(v+1,INT_MAX);
   dis[src]=0;
    for(int i=0;i<v-1;i++){
      for(int j=0;j<e;j++){
         int fir,sec,wei;
         fir=edges[j].first;
         sec=edges[j].second.first;
         wei=edges[j].second.second;
         if(dis[fir]!=INT_MAX  && dis[fir]+wei<dis[sec]){
            dis[sec]=dis[fir]+wei;
         }
      }
    }

    // after doing relation for v-1 times , u'll get shortest path to every node from the source

    //if u want to check for negative cycle , then do the relaxtion one more time , and if the value gets changed then there is a negative cycle 

    int NegCycle=0;
    for(int j=0;j<e;j++){
         int fir,sec,wei;
         fir=edges[j].first;
         sec=edges[j].second.first;
         wei=edges[j].second.second;
         if(dis[fir]!=INT_MAX  && dis[fir]+wei<dis[sec]){
            //dis[sec]=dis[fir]+wei;
            NegCycle++;
         }
      }

      if(NegCycle!=0){
         cout<<"There is a negative cycle"<<endl;
      }else{
         for(int i=0;i<v;i++){
            cout<<dis[i]<<" ";
         }
         cout<<endl;
      }

    
    return 0;
}
